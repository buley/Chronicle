

/* Install */
/* Creates the required IndexedDB object stores
 * Returns nothing on success. */

Chronicle.install( { on_success: function() {
	console.log('Chronicle.install success' );
}, on_error: function( res ) {
	console.log('Chronicle.install error', res );
} } );


/* Create */
/* Creates a new item given data.
 * Returns the new item object on success. */

Chronicle.create( { 'data': { 'one': 0,'two': 0 }, on_success: function( item_id, revision_id ) {
	console.log('Chronicle.create success item_id', item_id, 'revision_id', revision_id );
}, on_error: function( res ) {
	console.log('Chronicle.create error', res );
} } );


/* Delete */
/* Purge an item and all its revisions given an item_id.
 * Overloaded, purges a single revision given an item_id and revision_id.
 * Returns nothing on success. */

Chronicle.delete( { 'item_id': 1, on_success: function() {
	console.log('Chronicle.delete success');
}, on_error: function( res ) {
	console.log('Chronicle.delete error', res );
} } );


/* List */
/* Lists items given optional beginning and ending created, modified and id parameters.
 * Overloaded, lists revisions for an item given an item id.
 * Takes an optional descending boolean (default is false)
 * Returns each item object in succession on_success or an array of item objects on complete. */

Chronicle.list( { item_id: 1, begin: null, end: null, index: 'modified', descending: true, filter: function(row){
	console.log('Chronicle.list filter', row );
        return true;
}, on_complete: function( res ) {
	console.log('Chronicle.list complete', res );
}, on_success: function( res ) {
	console.log('Chronicle.list success', res );
}, on_error: function( res ) {
	console.log('Chronicle.list error', res );
} } );


/* Clear */
/* Deletes all revisions for an item given an item_id.
 * Returns nothing on success. */

Chronicle.clear( { 'item_id': 1, filter: function(row){
	console.log('Chronicle.clear filter', row );
        return true;
}, on_success: function( res ) {
	console.log('Chronicle.clear success', res );
}, on_error: function( res ) {
	console.log('Chronicle.clear error', res );
} } );


/* Forward */
/* Moves the active item revision forward by one (if not currently at the last revision) given an item_id.
 * moves n revisions forward given a count
 * Returns the newly active revision object on success */

Chronicle.forward( { 'item_id': 1, count: 1, on_success: function( res ) {
	console.log('Chronicle.forward success', res );
}, on_error: function( res ) {
	console.log('Chronicle.forward error', res );
} } );


/* Rollback */
/* Moves them the active revision backward by one (if not currently at the first revision) given an item_id.
 * Moves n revisions forward given a count.
 * Returns the newly active revision object on success. */

Chronicle.rollback( { 'item_id': 1, count: 1, on_success: function() {
	console.log( 'Chronicle.rollback success' );
}, on_error: function( res ) {
	console.log('Chronicle.rollback error', res );
} } );


/* Activate
/* Changes the active revision for an item (if not currently on that revision) given an item_id and a revision_id. 
 * Returns the newly active revision on success. */

Chronicle.activate( { item_id: 1, revision_id: 1, on_success: function( active_revision ) {
	console.log( 'Chronicle.activate success active_revision', active_revision );
}, on_error: function( res ) {
	console.log('Chronicle.activate error', res );
} } );


/* Save */
/* Creates a new revision for an item given an item_id and data, but does not activate it. 
 * Returns the new, non-active revision object on success. */

Chronicle.save( { 'item_id': 1, data: { foo: 'bar' }, on_success: function( revision_id ) {
	console.log( 'Chronicle.save success revision_id', revision_id );
}, on_error: function( res ) {
	console.log('Chronicle.save error', res );
}  } );


/* Update *//
/* Creates a new revision for an item, given an item_id and data, and activates it. 
 * Returns the revision object on success. */

Chronicle.update( { 'item_id': 1, data: { foo: 'bar' }, on_success: function( revision_id ) {
	console.log( 'Chronicle.update success revision_id', revision_id );
}, on_error: function( res ) {
	console.log('Chronicle.update error', res );
}  } );


/* Read */
/* Gets an item object, with its active revision as a property, given an item_id. */
 * Overloaded, returns an item object with a specific revision given a revision_id in addition to item_id.
 * Returns the item object on success. */

//active revision
Chronicle.read( { 'item_id': 1, filter: function( row ) {
	console.log( 'Chronicle.read filter row', row );
}, on_success: function() {
	console.log( 'Chronicle.read success' );
}, on_error: function( res ) {
	console.log( 'Chronicle.read error', res );
} } );

//specific revision
Chronicle.read( { 'item_id': 1, revision_id: 1, filter: function( row ) {
	console.log( 'Chronicle.read filter row', row );
}, on_success: function() {
	console.log( 'Chronicle.read success' );
}, on_error: function( res ) {
	console.log( 'Chronicle.read error', res );
} } );


/* Trash */
/* Trashes a revision for an item given an item_id and revision_id, making it visible in Chronicle.list(). 
 * Returns nothing on success. */ 

Chronicle.trash( { 'item_id': 1, filter: function( row ) {
	console.log( 'Chronicle.trash filter row', row );
}, on_success: function() {
	console.log( 'Chronicle.trash success' );
}, on_error: function( res ) {
	console.log( 'Chronicle.trash error', res );
} } );


/* Restore */
/* Untrashes a revision for an item given an item_id and revision_id, making it visible in Chronicle.list(). 
 * Returns nothing on success. */ 

Chronicle.restore( { 'item_id': 1, filter: function( row ) {
	console.log( 'Chronicle.restore filter row', row );
}, on_success: function() {
	console.log( 'Chronicle.restore success' );
}, on_error: function( res ) {
	console.log( 'Chronicle.restore error', res );
} } );

/* Coverup */
/* Purges subsequent revisions given a revision_id to start from and a count.
 * Overloaded, purges all remaining revisions given no count.
 * Returns nothing on success. */ 

Chronicle.coverup( { item_id: 1, revision_id: 1, count: 3, filter: function( row ) {
	console.log( 'Chronicle.coverup filter row', row );
}, on_success: function() {
	console.log( 'Chronicle.coverup success' );
}, on_error: function( res ) {
	console.log( 'Chronicle.coverup error', res );
} } );


/* Expunge */
/* Purges previous revisions given a revision_id to start from and a count.
 * Overloaded, purges all previous revisions given no count.
 * Returns nothing on success. */ 

Chronicle.expunge( { item_id: 1, revision_id: 1, count: 3, filter: function( row ) {
	console.log( 'Chronicle.expunge filter row', row );
}, on_success: function() {
	console.log( 'Chronicle.expunge success' );
}, on_error: function( res ) {
	console.log( 'Chronicle.expunge error', res );
} } );


/* Compare */
/* Provides the difference of two revisions given an item_id, a base revision_id and a comparison revision_id.
 * Returns the difference on success. */

Chronicle.compare( { item_id: 1, base: 2, comparison: 3, on_success: function() {
	console.log( 'Chronicle.compare success' );
}, on_error: function( res ) {
	console.log( 'Chronicle.compare error', res );
} } );
